kind: Service
apiVersion: v1
metadata:
  name: build-trigger
spec:
  selector:
    app: build-trigger
  ports:
    - protocol: TCP
      port: 80
      # Note that a Service can map an incoming port to any targetPort.
      # By default the targetPort will be set to the same value as the port field.
      # Perhaps more interesting is that targetPort can be a string,
      # referring to the name of a port in the backend Pods.
      # The actual port number assigned to that name can be different in each backend Pod.
      # This offers a lot of flexibility for deploying and evolving your Services.
      # For example, you can change the port number that pods expose in the next 
      # version of your backend software, without breaking clients.
      targetPort: 80
      # NodePort: Exposes the service on each Node’s IP at a static port (the NodePort).
      # A ClusterIP service, to which the NodePort service will route, is automatically created.
      # You’ll be able to contact the NodePort service,
      # from outside the cluster, by requesting <NodeIP>:<NodePort>.
      nodePort: 30062
  type: NodePort
---
apiVersion: apps/v1beta1  # for versions before 1.6.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: build-trigger-deployment
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: build-trigger
    spec:
      containers:
        - name: thingy
          image: gcr.io/agosto-k8s-demo/github-agosto-calvinbehling-cloud-trigger:2f78472fdb1167a8af969695831e5c0697a1b477
          ports:
          - containerPort: 80
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - '-c'
            - |
              COUNTER=0
              echo 'start'
              while true; do
                { echo -e 'HTTP/1.1 200 OK\r\n'; cat /index.html; } | nc -l 8080
                nc -l 80 < /index.html
                printf 'serviced %d\n' "$COUNTER"
                COUNTER=$(($COUNTER + 1))
              done
